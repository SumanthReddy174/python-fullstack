                *********Iterators, Generators & Comprehensions**********

31. What is the difference between an iterable and an iterator?

Iterable

An iterable is any Python object that you can loop over (use in a for loop).
Examples: list, tuple, string, dict, set
Iterable has a __iter__() method that returns an iterator.

 Example
numbers = [1, 2, 3]  # list is iterable

for num in numbers:
    print(num)


ðŸ”¹ 2. Iterator
An iterator is an object that keeps track of the current position while looping.

It has two main methods:
__iter__() â†’ returns the iterator itself
__next__() â†’ returns the next item, or raises StopIteration when finished
** Example
numbers = [1, 2, 3]
it = iter(numbers)   # create iterator

print(next(it))  # 1
print(next(it))  # 2
print(next(it))  # 3
# print(next(it))  # StopIteration error if uncomment.

32. What is the difference between `iter()` and `next()`?

**iter()

*Purpose: Converts an iterable (like list, string, tuple) into an iterator.
*You cannot call next() on an iterable directly, so you use iter() first.

âœ… Example
numbers = [10, 20, 30]
it = iter(numbers)  # create iterator
print(it)           # <list_iterator object at ...>


iter() = you give the robot hand ðŸ¤– that will pick toys one by one.

ðŸ”¹ 2. next()

*Purpose: Gets the next item from an iterator.
*If there are no items left â†’ raises StopIteration.

 Example
numbers = [10, 20, 30]
it = iter(numbers)  # create iterator

print(next(it))  # 10
print(next(it))  # 20
print(next(it))  # 30
# print(next(it))  # StopIteration if uncommented


33. What are generators in Python?
*A generator is a special kind of function that returns items one at a time instead of all at once.
*It saves memory because it doesnâ€™t create the whole list in memory.
*Generators use the yield keyword instead of return.

34. What is the purpose of the `yield` keyword?
*yield is used inside a function to make it a generator.
*Instead of returning all values at once, it gives one value at a time and remembers where it left off.
***program***

def my_generator():
    yield 1
    yield 2
    yield 3

gen = my_generator()

print(next(gen))  # 1
print(next(gen))  # 2
print(next(gen))  # 3



