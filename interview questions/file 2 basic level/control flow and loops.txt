                       ****control flow and loops****


16. What is the difference between `break`, `continue`, and `pass`?
1. break

ðŸ‘‰ Stops the loop completely (jumps out of the loop).

for i in range(1, 6):
    if i == 3:
        break   # stop loop when i = 3
    print(i)


ðŸ”¹ 2. continue

ðŸ‘‰ Skips the current step and goes to the next one.

for i in range(1, 6):
    if i == 3:
        continue   # skip printing 3
    print(i)

# Output: 1 2 4 5

3. pass

ðŸ‘‰ Does nothing. Itâ€™s just a placeholder (to avoid error).

for i in range(1, 6):
    if i == 3:
        pass   # do nothing for now
    print(i)

# Output: 1 2 3 4 5


17. What is the purpose of the `else` clause in loops?
else with loops in Python

ðŸ‘‰ The else block runs after the loop finishes normally (without break).

âœ… Example 1: With a for loop
for i in range(5):
    print(i)
else:
    print("Loop finished successfully!")


Output:

0
1
2
3
4
Loop finished successfully!
.

âœ… Example 2: When break is used
for i in range(5):
    if i == 3:
        break   # loop stopped early
    print(i)
else:
    print("Loop finished successfully!")


Output:

0
1
2


ðŸ‘‰ The else didnâ€™t run, because the loop stopped with break (else wonâ€™t run).

âœ… Example 3: With a while loop
x = 0
while x < 3:
    print(x)
    x += 1
else:
    print("While loop done!")
Output:

0
1
2
While loop done!


18. How does `enumerate()` work in Python?

enumerate() is a built-in Python function that gives you both the index (position) and the value while looping.
Normally, a for loop only gives values, but enumerate adds numbers to them.

Example 1: Without enumerate()
fruits = ["apple", "banana", "cherry"]

for fruit in fruits:
    print(fruit)


Output:

apple
banana
cherry


ðŸ‘‰ Here we donâ€™t know the position (index) of each fruit.

Example 2: With enumerate()
fruits = ["apple", "banana", "cherry"]

for index, fruit in enumerate(fruits):
    print(index, fruit)


Output:

0 apple
1 banana
2 cherry


19. How do you iterate through a dictionary?

A dictionary has key : value pairs.
Example:

student = {"name": "Alice", "age": 20, "grade": "A"}

âœ… Different Ways to Iterate
1. Iterate over keys
for key in student:
    print(key)


Output:

name
age
grade



2. Iterate over values
for value in student.values():
    print(value)


Output:

Alice
20
A


3. Iterate over key and value together
for key, value in student.items():
    print(key, ":", value)


Output:

name : Alice
age : 20
grade : A
.

4. Iterate over keys explicitly
for key in student.keys():
    print(key)









